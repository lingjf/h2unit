name: 🔨

on: [push]

jobs:
  linux-x86_64-gcc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: check platform
        run: uname -a && getconf GNU_LIBC_VERSION
      - name: pre-defined preprocessor macros
        run: gcc -dM -E - < /dev/null
      - name: sysroot directory for headers and libraries
        run: g++ -E -v - < /dev/null
      - name: build print
        run: cd print && cmake . && cmake --build .
      - name: run print
        run: ./print/a.out -e 'new[] free'
      - name: show help tips
        run: ./print/a.out -h
      - name: list print cases cases
        run: ./print/a.out -l
      - name: 🏗️ build test
        run: cd test && cmake . && cmake --build . -j 2
      - name: run test without memory check
        run: cd test && LD_BIND_NOW=1 ./a.out -m -v -e test_memory_
      - name: ✨ run test with memory check
        run: cd test && LD_BIND_NOW=1 ./a.out -cvj
      - name: install coverage tools
        run: sudo pip3 install git+https://github.com/gcovr/gcovr.git
      - name: build and run example
        run: make -C example
      - name: show coverage report
        run: python -m json.tool ./example/coverage.json

  macos-x86_64-clang:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: check platform
        run: uname -a
      - name: pre-defined preprocessor macros
        run: clang -dM -E - < /dev/null
      - name: sysroot directory for headers and libraries
        run: clang++ -E -v - < /dev/null
      - name: build print
        run: cd print && cmake . && cmake --build .
      - name: run print
        run: ./print/a.out -e 'new[] free'
      - name: show help tips
        run: ./print/a.out -h
      - name: list print cases
        run: ./print/a.out -l
      - name: 🏗️ build test
        run: cd test && cmake . && cmake --build . -j 2
      - name: run test without memory check
        run: cd test && ./a.out -m -v -e test_memory_
      - name: ✨ run test with memory check
        run: cd test && ./a.out -cvj
      - name: install coverage tools
        run: brew install lcov
      - name: build and run example
        run: make lcov -C example

  windows-x86_64-msvc:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: build print
        run: cd print && cmake . && cmake --build .
      - name: run print
        run: ./print/Debug/a.out.exe -e 'new[] free'
      - name: show help tips
        run: ./print/Debug/a.out.exe -h
      - name: list print cases
        run: ./print/Debug/a.out.exe -l
      - name: 🏗️ build test
        run: cd test && cmake . && cmake --build . -j $env:NUMBER_OF_PROCESSORS
      - name: run test without memory check
        run: cd test && ./Debug/a.out.exe -m -v -e test_memory_
      - name: ✨ run test with memory check
        run: cd test && ./Debug/a.out.exe -cv
      - name: build example
        run: mkdir build_example && cd build_example && cmake ../example && cmake --build .
      - name: run example
        run: ./build_example/Debug/a.out.exe

  linux-arm64-gcc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: checkout qemu
        uses: actions/checkout@v2
        with:
          repository: qemu/qemu
          path: qemu
          ref: 8746309137ba470d1b2e8f5ce86ac228625db940
      - name: build and install qemu
        run: |
          cd qemu
          ./configure --target-list=aarch64-linux-user --disable-system
          make -j 2
          sudo make install
      - name: install aarch64-gnu-toolchain
        run: |
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      - name: check platform
        run: uname -a && getconf GNU_LIBC_VERSION
      - name: pre-defined preprocessor macros
        run: aarch64-linux-gnu-g++ -march=armv8-a -dM -E - < /dev/null
      - name: sysroot directory for headers and libraries
        run: aarch64-linux-gnu-g++ -march=armv8-a -E -v - < /dev/null
      - name: build print
        run: |
          cd print 
          cmake -DCMAKE_TOOLCHAIN_FILE=../build/toolchains/aarch64-linux-gcc.cmake .
          cmake --build .
      - name: run print
        run: qemu-aarch64 -L /usr/aarch64-linux-gnu ./print/a.out -e 'new[] free'
      - name: 🏗️ build test
        run: |
          cd test
          cmake -DCMAKE_TOOLCHAIN_FILE=../build/toolchains/aarch64-linux-gcc.cmake .
          cmake --build . -j 2
      - name: run test without memory check
        run: |
          cd test
          qemu-aarch64 -L /usr/aarch64-linux-gnu -E LD_BIND_NOW=1 ./a.out -m -v -e test_memory_
      - name: ✨ run test with memory check
        run: |
          cd test
          qemu-aarch64 -L /usr/aarch64-linux-gnu -E LD_BIND_NOW=1 ./a.out -cvj
      - name: build example
        run: |
          mkdir build_example
          cd build_example
          cmake -DCMAKE_TOOLCHAIN_FILE=../build/toolchains/aarch64-linux-gcc.cmake ../example
          cmake --build .
      - name: run example
        run: qemu-aarch64 -L /usr/aarch64-linux-gnu ./build_example/a.out

  linux-x86_64:
    runs-on: ubuntu-18.04
    env:
      CC: ${{matrix.cc}}
      CXX: ${{matrix.cxx}}
    strategy:
      matrix:
        include:
          - { cc: gcc-7, cxx: g++-7 }
          - { cc: gcc-8, cxx: g++-8 }
          - { cc: clang-9, cxx: clang++-9 }
          - { cc: clang, cxx: clang++ }
    name: 🚧 linux-x86_64-${{matrix.cc}}
    steps:
      - uses: actions/checkout@v2
      - name: install ${{matrix.cc}} ${{matrix.cxx}}
        run: |
          sudo apt-get update
          sudo apt-get install ${{matrix.cc}} ${{matrix.cxx}}
        continue-on-error: true
      - name: check platform
        run: uname -a && getconf GNU_LIBC_VERSION
      - name: pre-defined preprocessor macros
        run: ${{matrix.cc}} -dM -E - < /dev/null
      - name: sysroot directory for headers and libraries
        run: ${{matrix.cxx}} -E -v - < /dev/null
      - name: build print
        run: |
          cmake -B ci_print print
          cmake --build ci_print
      - name: run print
        run: ./ci_print/a.out -e 'new[] free'
      - name: 🏗️ build test
        run: |
          cmake -B ci_test test
          cmake --build ci_test -j 2
      - name: run test without memory check
        run: LD_BIND_NOW=1 ./ci_test/a.out -m -v -e test_memory_
      - name: ✨ run test with memory check
        run: LD_BIND_NOW=1 ./ci_test/a.out -cvj
      - name: build example
        run: |
          cmake -B ci_example example
          cmake --build ci_example
      - name: run example
        run: ./ci_example/a.out

  linux-x86:
    runs-on: ubuntu-latest
    env:
      CC: ${{matrix.cc}}
      CXX: ${{matrix.cxx}}
    strategy:
      matrix:
        include:
          - { cc: gcc, cxx: g++, toolchain: ../build/toolchains/x86-linux-gcc-m32.cmake }
          - { cc: clang, cxx: clang++, toolchain: ../build/toolchains/x86-linux-clang-m32.cmake }
    name: 🚧 linux-x86-${{matrix.cc}}-m32
    steps:
      - uses: actions/checkout@v2
      - name: check platform
        run: uname -a && getconf GNU_LIBC_VERSION
      - name: install multilib
        run: |
          sudo apt-get update
          sudo apt-get install gcc-multilib g++-multilib
      - name: build print
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=${{matrix.toolchain}} -B ci_print print
          cmake --build ci_print
      - name: run print
        run: ./ci_print/a.out -e 'new[] free'
      - name: 🏗️ build test
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=${{matrix.toolchain}} -B ci_test test
          cmake --build ci_test -j 2
      - name: run test without memory check
        run: LD_BIND_NOW=1 ./ci_test/a.out -m -v -e test_memory_
      - name: ✨ run test with memory check
        run: LD_BIND_NOW=1 ./ci_test/a.out -cvj
      - name: build example
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=${{matrix.toolchain}} -B ci_example example
          cmake --build ci_example
      - name: run example
        run: ./ci_example/a.out
