name: 🔨

on: [push]

jobs:
  linux-x86_64-gcc:
    name: ✨ linux-x86_64-gcc
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: check platform
        run: uname -a && getconf GNU_LIBC_VERSION
      - name: pre-defined preprocessor macros
        run: gcc -dM -E - < /dev/null
      - name: sysroot directory for headers and libraries
        run: g++ -E -v - < /dev/null
      - name: configure print
        run: cd print && cmake .
      - name: build print
        run: cd print && cmake --build .
      - name: run print
        run: ./print/a.out -e 'new[] free'
      - name: show help tips
        run: ./print/a.out -h
      - name: list print cases cases
        run: ./print/a.out -l
      - name: configure test
        run: cd test && cmake .
      - name: 🏗️ build test
        run: cd test && cmake --build . -j 2 --verbose
      - name: run test without memory check
        run: cd test && LD_BIND_NOW=1 ./a.out -m -v -e test_memory_
      - name: ✨ run test with memory check
        run: cd test && LD_BIND_NOW=1 ./a.out -cpvj
      - name: install coverage tools
        run: sudo pip3 install git+https://github.com/gcovr/gcovr.git
      - name: build and run example
        run: make -C example
      - name: show coverage report
        run: python -m json.tool ./example/coverage.json

  macos-x86_64-clang:
    name: ✨ macos-x86_64-clang
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: check platform
        run: uname -a
      - name: pre-defined preprocessor macros
        run: clang -dM -E - < /dev/null
      - name: sysroot directory for headers and libraries
        run: clang++ -E -v - < /dev/null
      - name: configure print
        run: cd print && cmake .
      - name: build print
        run: cd print && cmake --build .
      - name: run print
        run: ./print/a.out -e 'new[] free'
      - name: show help tips
        run: ./print/a.out -h
      - name: list print cases
        run: ./print/a.out -l
      - name: configure test
        run: cd test && cmake .
      - name: 🏗️ build test
        run: cd test && cmake --build . -j 2 --verbose
      - name: run test without memory check
        run: cd test && ./a.out -m -v -e test_memory_
      - name: ✨ run test with memory check
        run: cd test && ./a.out -cpvj
      - name: install coverage tools
        run: brew install lcov
      - name: build and run example
        run: make lcov -C example

  windows-x86_64-msvc:
    name: ✨ windows-x86_64-msvc
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: configure print
        run: cd print && cmake .
      - name: build print
        run: cd print && cmake --build .
      - name: run print
        run: ./print/Debug/a.out.exe -e 'new[] free'
      - name: show help tips
        run: ./print/Debug/a.out.exe -h
      - name: list print cases
        run: ./print/Debug/a.out.exe -l
      - name: configure test
        run: cd test && cmake .
      - name: 🏗️ build test
        run: cd test && cmake --build . -j $env:NUMBER_OF_PROCESSORS --verbose
      - name: run test without memory check
        run: cd test && ./Debug/a.out.exe -m -v -e test_memory_
      - name: ✨ run test with memory check
        run: cd test && ./Debug/a.out.exe -cpvj
      - name: configure example
        run: cmake -B ci_example example
      - name: build example
        run: cmake --build ci_example
      - name: run example
        run: ./ci_example/Debug/a.out.exe

  linux-x86_64:
    runs-on: ubuntu-18.04
    env:
      CC: ${{matrix.cc}}
      CXX: ${{matrix.cxx}}
    strategy:
      matrix:
        include:
          - { cc: gcc-7, cxx: g++-7 }
          - { cc: gcc-8, cxx: g++-8 }
          - { cc: gcc-9, cxx: g++-9 }
          - { cc: clang-8, cxx: clang++-8 }
          - { cc: clang-9, cxx: clang++-9 }
          - { cc: clang-10, cxx: clang++-10 }
    name: linux-x86_64-${{matrix.cc}}
    steps:
      - uses: actions/checkout@v2
      - name: install ${{matrix.cc}} ${{matrix.cxx}}
        run: |
          sudo apt-get update
          sudo apt-get install ${{matrix.cc}} ${{matrix.cxx}}
        continue-on-error: true
      - name: check platform
        run: uname -a && getconf GNU_LIBC_VERSION
      - name: pre-defined preprocessor macros
        run: ${{matrix.cc}} -dM -E - < /dev/null
      - name: sysroot directory for headers and libraries
        run: ${{matrix.cxx}} -E -v - < /dev/null
      - name: configure print
        run: cmake -B ci_print print
      - name: build print
        run: cmake --build ci_print
      - name: run print
        run: ./ci_print/a.out -e 'new[] free'
      - name: configure test
        run: cmake -B ci_test test
      - name: 🏗️ build test
        run: cmake --build ci_test -j 2 --verbose
      - name: run test without memory check
        run: LD_BIND_NOW=1 ./ci_test/a.out -m -v -e test_memory_
      - name: ✨ run test with memory check
        run: LD_BIND_NOW=1 ./ci_test/a.out -cvj
      - name: configure example
        run: cmake -B ci_example example
      - name: build example
        run: cmake --build ci_example
      - name: run example
        run: ./ci_example/a.out

  linux-x86:
    runs-on: ubuntu-latest
    env:
      CC: ${{matrix.cc}}
      CXX: ${{matrix.cxx}}
    strategy:
      matrix:
        include:
          - { cc: gcc, cxx: g++ }
          - { cc: clang, cxx: clang++ }
    name: linux-x86-${{matrix.cc}}-m32
    steps:
      - uses: actions/checkout@v2
      - name: check platform
        run: uname -a && getconf GNU_LIBC_VERSION
      - name: install multilib
        run: |
          sudo apt-get update
          sudo apt-get install gcc-multilib g++-multilib
      - name: configure print
        run: cmake -DCMAKE_C_FLAGS="-m32" -DCMAKE_CXX_FLAGS="-m32" -B ci_print print
      - name: build print
        run: cmake --build ci_print
      - name: run print
        run: ./ci_print/a.out -e 'new[] free'
      - name: configure test
        run: cmake -DCMAKE_C_FLAGS="-m32" -DCMAKE_CXX_FLAGS="-m32" -B ci_test test
      - name: 🏗️ build test
        run: cmake --build ci_test -j 2 --verbose
      - name: run test without memory check
        run: LD_BIND_NOW=1 ./ci_test/a.out -m -v -e test_memory_
      - name: ✨ run test with memory check
        run: LD_BIND_NOW=1 ./ci_test/a.out -cvj
      - name: configure example
        run: cmake -DCMAKE_C_FLAGS="-m32" -DCMAKE_CXX_FLAGS="-m32" -B ci_example example
      - name: build example
        run: cmake --build ci_example
      - name: run example
        run: ./ci_example/a.out

  linux-arm64-gcc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: checkout qemu
        uses: actions/checkout@v2
        with:
          repository: qemu/qemu
          path: qemu
          ref: 8746309137ba470d1b2e8f5ce86ac228625db940
      - name: build and install qemu
        run: |
          cd qemu
          ./configure --target-list=aarch64-linux-user --disable-system
          make -j 2
          sudo make install
      - name: install aarch64-gnu-toolchain
        run: |
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      - name: check platform
        run: uname -a && getconf GNU_LIBC_VERSION
      - name: pre-defined preprocessor macros
        run: aarch64-linux-gnu-g++ -march=armv8-a -dM -E - < /dev/null
      - name: sysroot directory for headers and libraries
        run: aarch64-linux-gnu-g++ -march=armv8-a -E -v - < /dev/null
      - name: configure print
        run: cmake -DCMAKE_C_COMPILER="aarch64-linux-gnu-gcc" -DCMAKE_CXX_COMPILER="aarch64-linux-gnu-g++" -DCMAKE_C_FLAGS="-march=armv8-a" -DCMAKE_CXX_FLAGS="-march=armv8-a" -B ci_print print
      - name: build print
        run: cmake --build ci_print
      - name: run print
        run: qemu-aarch64 -L /usr/aarch64-linux-gnu ./ci_print/a.out -e 'new[] free'
      - name: configure test
        run: cmake -DCMAKE_C_COMPILER="aarch64-linux-gnu-gcc" -DCMAKE_CXX_COMPILER="aarch64-linux-gnu-g++" -DCMAKE_C_FLAGS="-march=armv8-a" -DCMAKE_CXX_FLAGS="-march=armv8-a" -B ci_test test
      - name: 🏗️ build test
        run: cmake --build ci_test -j 2 --verbose
      - name: run test without memory check
        run: qemu-aarch64 -L /usr/aarch64-linux-gnu -E LD_BIND_NOW=1 ./ci_test/a.out -m -v -e test_memory_
      - name: ✨ run test with memory check
        run: qemu-aarch64 -L /usr/aarch64-linux-gnu -E LD_BIND_NOW=1 ./ci_test/a.out -cvj
      - name: configure example
        run: cmake -DCMAKE_C_COMPILER="aarch64-linux-gnu-gcc" -DCMAKE_CXX_COMPILER="aarch64-linux-gnu-g++" -DCMAKE_C_FLAGS="-march=armv8-a" -DCMAKE_CXX_FLAGS="-march=armv8-a" -B ci_example example
      - name: build example
        run: cmake --build ci_example
      - name: run example
        run: qemu-aarch64 -L /usr/aarch64-linux-gnu ./ci_example/a.out

  macos-xcode:
    runs-on: macos-10.15
    strategy:
      fail-fast: false
      matrix:
        xcode: ['12.4', '11.7', '10.3']
    name: macos-x86_64-xcode-${{matrix.xcode}}
    steps:
      - uses: actions/checkout@v2
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{matrix.xcode}}
      - name: check platform
        run: uname -a
      - name: pre-defined preprocessor macros
        run: clang -dM -E - < /dev/null
      - name: sysroot directory for headers and libraries
        run: clang++ -E -v - < /dev/null
      - name: configure print
        run: cmake -B ci_print print
      - name: build print
        run: cmake --build ci_print
      - name: run print
        run: ./ci_print/a.out -e 'new[] free'
      - name: configure test
        run: cmake -B ci_test test
      - name: 🏗️ build test
        run: cmake --build ci_test -j 2 --verbose
      - name: run test without memory check
        run: LD_BIND_NOW=1 ./ci_test/a.out -m -v -e test_memory_
      - name: ✨ run test with memory check
        run: LD_BIND_NOW=1 ./ci_test/a.out -cvj

  windows-x86_64-msbuild:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: microsoft/setup-msbuild@v1.0.2
      - name: build example
        run: cd example && msbuild example.vcxproj /p:configuration=Debug
      # - name: run example
      #   run: ./example/Debug/example.exe
      - name: build print
        run: cd print && msbuild print.vcxproj /p:configuration=Debug
      # - name: run print
      #   run: ./print/Debug/print.exe -e 'new[] free'
      - name: show help tips
        run: ./print/Debug/print.exe -h
      - name: list print cases
        run: ./print/Debug/print.exe -l

  cygwin-x86_64-gcc:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          msystem: msys
          update: true
          install: >-
            base-devel
            msys2-devel
            cmake
      - name: check platform
        run: uname -a
      - name: pre-defined preprocessor macros
        run: gcc -dM -E - < /dev/null
      - name: sysroot directory for headers and libraries
        run: g++ -E -v - < /dev/null
      - name: configure print
        run: cmake -B ci_print print
      - name: build print
        run: cmake --build ci_print
      - name: run print
        run: ./ci_print/a.out -e 'new[] free'
      - name: configure test
        run: cmake -B ci_test test
      - name: 🏗️ build test
        run: cmake --build ci_test -j 2 --verbose
      - name: run test without memory check
        run: LD_BIND_NOW=1 ./ci_test/a.out -m -v -e test_memory_
      - name: ✨ run test with memory check
        run: LD_BIND_NOW=1 ./ci_test/a.out -vj
      - name: configure example
        run: cmake -B ci_example example
      - name: build example
        run: cmake --build ci_example
      - name: run example
        run: ./ci_example/a.out

  mingw: # https://www.msys2.org/docs/environments
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # - { sys: mingw32, env: i686 }
          - { sys: mingw64, env: x86_64 }
          - { sys: ucrt64,  env: ucrt-x86_64 }
          - { sys: clang64, env: clang-x86_64 }
    name: mingw-${{matrix.sys}}
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          install: >-
            make
            mingw-w64-${{matrix.env}}-toolchain
            mingw-w64-${{matrix.env}}-cmake
            mingw-w64-${{matrix.env}}-ninja
      - name: check platform
        run: uname -a
      - name: pre-defined preprocessor macros
        run: gcc -dM -E - < /dev/null
      - name: sysroot directory for headers and libraries
        run: g++ -E -v - < /dev/null
      - name: configure print
        run: cmake -B ci_print print
      - name: build print
        run: cmake --build ci_print
      - name: run print
        run: ./ci_print/a.out -e 'new[] free'
      - name: configure test
        run: cmake -B ci_test test
      - name: 🏗️ build test
        run: cmake --build ci_test -j 2 --verbose
      - name: run test without memory check
        run: ./ci_test/a.out -m -v -e test_memory_
      - name: ✨ run test with memory check
        run: ./ci_test/a.out -cpvj
      - name: configure example
        run: cmake -B ci_example example
      - name: build example
        run: cmake --build ci_example
      - name: run example
        run: ./ci_example/a.out
