import os

build_dir = os.path.dirname(os.path.realpath(__file__))

macro_in_hpp = os.path.join(build_dir, '../source/utils/h2_macro.in.hpp')

f_macro_in_hpp = open(macro_in_hpp, 'w')

def writeline(line):
    f_macro_in_hpp.write(line + '\n')


writeline("//////// >>>>> generated by build/generate.py  DON'T EDIT")

def H2PP_EQ(count):
    for i in range(count):
        line = '#define _H2PP_EQ__{0}__{0} H2PP_PROBE()'.format(i)
        writeline(line)

H2PP_EQ(32)

def do_repeat(n, prefix, index = True, postfix = ''):
    s = ''
    for i in range(n):
        s = s + prefix
        if index:
            s = s + str(i)
        s = s + postfix
    return s

def do_join(count, prefix, split):
    s = ''
    for i in range(count):
        if i > 0:
            s = s + split
        s = s + prefix + str(i)
    return s

def _H2PP_TH(index):
    return '#define _H2PP_TH{0}('.format(index) + do_join(index + 1, '_', ', ') + ', ...) _{}'.format(index)

def H2PP_TH(count):
    for i in range(count):
        writeline(_H2PP_TH(i))
    for i in range(count):
        h2pp_th = '#define H2PP_TH{0}(...) H2PP_PROXY2(_H2PP_TH, {0}, (__VA_ARGS__, '.format(i) + do_repeat(i, ', ', False, '') + '))'
        writeline(h2pp_th)

writeline('')
H2PP_TH(32)

def H2PP_INC(count):
    for i in range(count):
        line = '#define H2PP_INC_{} {}'.format(i, i + 1)
        writeline(line)

def H2PP_DEC(count):
    for i in range(count):
        line = '#define H2PP_DEC_{} {}'.format(i + 1, i)
        writeline(line)

writeline('')
H2PP_INC(32)
H2PP_DEC(32)

def _H2PP_RS(prefix, count):
    lines = '#define _H2PP_{}_1(...) __VA_ARGS__\n'.format(prefix)
    for i in range(1, count):
        line = '#define _H2PP_{}_{}(...) _H2PP_{}_{}(_H2PP_{}_{}(__VA_ARGS__))\n'.format(prefix, 2 ** i, prefix, 2 ** (i - 1), prefix, 2 ** (i - 1))
        lines = line + lines
    return lines

writeline('')
writeline(_H2PP_RS('EVAL', 8))

def __H2PP_0x(N):
    _th = '_H2PP_{}TH'.format(N)
    _n = ''
    for i in range(N):
        _n = _n + '_' + str(i) + ', '
    n1 = ''
    for i in range(N - 1):
        n1 = n1 + ', 1' 
    nn = ''
    for i in range(N, 0, -1):
        nn = nn + ', ' + str(i)
    writeline('#define ' + _th + '(' + _n + '_{}, ...) _{}'.format(N, N))
    writeline('#define H2PP_HAS_COMMA(...) H2PP_PROXY(' + _th + ', (__VA_ARGS__' + n1 +', 0))')
    writeline('#define H2PP_ARG_COUNT(...) H2PP_PROXY(' + _th + ', (__VA_ARGS__' + nn +'))')

__H2PP_0x(64)

writeline('')
writeline('//////// <<<<< generated by build/generate.py')

f_macro_in_hpp.close()
