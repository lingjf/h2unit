//////// generated by test/test_utils_macro_generate.py do not edit
#include "../source/h2_unit.cpp"
SUITE(H2PP_TH [generated])
{
   int n0 = -1;
   int n1 = -1;
   int n2 = -1;
   int n3 = -1;
   int n4 = -1;
   int n5 = -1;
   int n6 = -1;
   int n7 = -1;
   int n8 = -1;
   int n9 = -1;
   int n10 = -1;
   int n11 = -1;
   int n12 = -1;
   int n13 = -1;
   int n14 = -1;
   int n15 = -1;
   int n16 = -1;
   int n17 = -1;
   int n18 = -1;
   int n19 = -1;
   int n20 = -1;
   int n21 = -1;
   int n22 = -1;
   int n23 = -1;
   int n24 = -1;
   int n25 = -1;
   int n26 = -1;
   int n27 = -1;
   int n28 = -1;
   int n29 = -1;
   int n30 = -1;
   int n31 = -1;
   Case(0 arguments)
   {
      n0 = H2PP_TH0() + 0;
      OK(0, n0);
      n1 = H2PP_TH1() + 0;
      OK(0, n1);
      n2 = H2PP_TH2() + 0;
      OK(0, n2);
      n3 = H2PP_TH3() + 0;
      OK(0, n3);
      n4 = H2PP_TH4() + 0;
      OK(0, n4);
      n5 = H2PP_TH5() + 0;
      OK(0, n5);
      n6 = H2PP_TH6() + 0;
      OK(0, n6);
      n7 = H2PP_TH7() + 0;
      OK(0, n7);
      n8 = H2PP_TH8() + 0;
      OK(0, n8);
      n9 = H2PP_TH9() + 0;
      OK(0, n9);
      n10 = H2PP_TH10() + 0;
      OK(0, n10);
      n11 = H2PP_TH11() + 0;
      OK(0, n11);
      n12 = H2PP_TH12() + 0;
      OK(0, n12);
      n13 = H2PP_TH13() + 0;
      OK(0, n13);
      n14 = H2PP_TH14() + 0;
      OK(0, n14);
      n15 = H2PP_TH15() + 0;
      OK(0, n15);
      n16 = H2PP_TH16() + 0;
      OK(0, n16);
      n17 = H2PP_TH17() + 0;
      OK(0, n17);
      n18 = H2PP_TH18() + 0;
      OK(0, n18);
      n19 = H2PP_TH19() + 0;
      OK(0, n19);
      n20 = H2PP_TH20() + 0;
      OK(0, n20);
      n21 = H2PP_TH21() + 0;
      OK(0, n21);
      n22 = H2PP_TH22() + 0;
      OK(0, n22);
      n23 = H2PP_TH23() + 0;
      OK(0, n23);
      n24 = H2PP_TH24() + 0;
      OK(0, n24);
      n25 = H2PP_TH25() + 0;
      OK(0, n25);
      n26 = H2PP_TH26() + 0;
      OK(0, n26);
      n27 = H2PP_TH27() + 0;
      OK(0, n27);
      n28 = H2PP_TH28() + 0;
      OK(0, n28);
      n29 = H2PP_TH29() + 0;
      OK(0, n29);
      n30 = H2PP_TH30() + 0;
      OK(0, n30);
      n31 = H2PP_TH31() + 0;
      OK(0, n31);
   }
   Case(1 arguments)
   {
      n0 = H2PP_TH0(0) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0) + 0;
      OK(0, n1);
      n2 = H2PP_TH2(0) + 0;
      OK(0, n2);
      n3 = H2PP_TH3(0) + 0;
      OK(0, n3);
      n4 = H2PP_TH4(0) + 0;
      OK(0, n4);
      n5 = H2PP_TH5(0) + 0;
      OK(0, n5);
      n6 = H2PP_TH6(0) + 0;
      OK(0, n6);
      n7 = H2PP_TH7(0) + 0;
      OK(0, n7);
      n8 = H2PP_TH8(0) + 0;
      OK(0, n8);
      n9 = H2PP_TH9(0) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0) + 0;
      OK(0, n15);
      n16 = H2PP_TH16(0) + 0;
      OK(0, n16);
      n17 = H2PP_TH17(0) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0) + 0;
      OK(0, n31);
   }
   Case(2 arguments)
   {
      n0 = H2PP_TH0(0, 1) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1) + 0;
      OK(0, n2);
      n3 = H2PP_TH3(0, 1) + 0;
      OK(0, n3);
      n4 = H2PP_TH4(0, 1) + 0;
      OK(0, n4);
      n5 = H2PP_TH5(0, 1) + 0;
      OK(0, n5);
      n6 = H2PP_TH6(0, 1) + 0;
      OK(0, n6);
      n7 = H2PP_TH7(0, 1) + 0;
      OK(0, n7);
      n8 = H2PP_TH8(0, 1) + 0;
      OK(0, n8);
      n9 = H2PP_TH9(0, 1) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0, 1) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1) + 0;
      OK(0, n15);
      n16 = H2PP_TH16(0, 1) + 0;
      OK(0, n16);
      n17 = H2PP_TH17(0, 1) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0, 1) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1) + 0;
      OK(0, n31);
   }
   Case(3 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2) + 0;
      OK(0, n3);
      n4 = H2PP_TH4(0, 1, 2) + 0;
      OK(0, n4);
      n5 = H2PP_TH5(0, 1, 2) + 0;
      OK(0, n5);
      n6 = H2PP_TH6(0, 1, 2) + 0;
      OK(0, n6);
      n7 = H2PP_TH7(0, 1, 2) + 0;
      OK(0, n7);
      n8 = H2PP_TH8(0, 1, 2) + 0;
      OK(0, n8);
      n9 = H2PP_TH9(0, 1, 2) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0, 1, 2) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1, 2) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2) + 0;
      OK(0, n15);
      n16 = H2PP_TH16(0, 1, 2) + 0;
      OK(0, n16);
      n17 = H2PP_TH17(0, 1, 2) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0, 1, 2) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1, 2) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2) + 0;
      OK(0, n31);
   }
   Case(4 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3) + 0;
      OK(0, n4);
      n5 = H2PP_TH5(0, 1, 2, 3) + 0;
      OK(0, n5);
      n6 = H2PP_TH6(0, 1, 2, 3) + 0;
      OK(0, n6);
      n7 = H2PP_TH7(0, 1, 2, 3) + 0;
      OK(0, n7);
      n8 = H2PP_TH8(0, 1, 2, 3) + 0;
      OK(0, n8);
      n9 = H2PP_TH9(0, 1, 2, 3) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0, 1, 2, 3) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1, 2, 3) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2, 3) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3) + 0;
      OK(0, n15);
      n16 = H2PP_TH16(0, 1, 2, 3) + 0;
      OK(0, n16);
      n17 = H2PP_TH17(0, 1, 2, 3) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0, 1, 2, 3) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1, 2, 3) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2, 3) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3) + 0;
      OK(0, n31);
   }
   Case(5 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4) + 0;
      OK(0, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4) + 0;
      OK(0, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4) + 0;
      OK(0, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4) + 0;
      OK(0, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4) + 0;
      OK(0, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4) + 0;
      OK(0, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4) + 0;
      OK(0, n31);
   }
   Case(6 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n31);
   }
   Case(7 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n31);
   }
   Case(8 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n31);
   }
   Case(9 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n31);
   }
   Case(10 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n31);
   }
   Case(11 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n31);
   }
   Case(12 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n31);
   }
   Case(13 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n31);
   }
   Case(14 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n31);
   }
   Case(15 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n31);
   }
   Case(16 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(15, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15) + 0;
      OK(0, n31);
   }
   Case(17 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(15, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(16, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(0, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16) + 0;
      OK(0, n31);
   }
   Case(18 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(15, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(16, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(17, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(0, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17) + 0;
      OK(0, n31);
   }
   Case(19 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(15, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(16, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(17, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(18, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(0, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) + 0;
      OK(0, n31);
   }
   Case(20 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(15, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(16, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(17, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(18, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(19, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(0, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19) + 0;
      OK(0, n31);
   }
   Case(21 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(15, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(16, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(17, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(18, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(19, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(20, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(0, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) + 0;
      OK(0, n31);
   }
   Case(22 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(15, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(16, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(17, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(18, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(19, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(20, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(21, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(0, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21) + 0;
      OK(0, n31);
   }
   Case(23 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(15, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(16, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(17, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(18, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(19, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(20, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(21, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(22, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(0, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) + 0;
      OK(0, n31);
   }
   Case(24 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(15, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(16, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(17, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(18, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(19, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(20, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(21, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(22, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(23, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(0, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23) + 0;
      OK(0, n31);
   }
   Case(25 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(15, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(16, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(17, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(18, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(19, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(20, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(21, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(22, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(23, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(24, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(0, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24) + 0;
      OK(0, n31);
   }
   Case(26 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(15, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(16, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(17, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(18, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(19, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(20, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(21, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(22, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(23, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(24, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(25, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(0, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25) + 0;
      OK(0, n31);
   }
   Case(27 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(15, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(16, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(17, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(18, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(19, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(20, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(21, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(22, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(23, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(24, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(25, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(26, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(0, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26) + 0;
      OK(0, n31);
   }
   Case(28 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(15, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(16, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(17, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(18, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(19, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(20, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(21, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(22, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(23, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(24, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(25, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(26, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(27, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(0, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27) + 0;
      OK(0, n31);
   }
   Case(29 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(15, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(16, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(17, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(18, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(19, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(20, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(21, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(22, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(23, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(24, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(25, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(26, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(27, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(28, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(0, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28) + 0;
      OK(0, n31);
   }
   Case(30 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(15, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(16, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(17, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(18, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(19, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(20, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(21, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(22, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(23, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(24, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(25, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(26, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(27, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(28, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(29, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(0, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29) + 0;
      OK(0, n31);
   }
   Case(31 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(15, n15);
      n16 = H2PP_TH16(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(16, n16);
      n17 = H2PP_TH17(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(17, n17);
      n18 = H2PP_TH18(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(18, n18);
      n19 = H2PP_TH19(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(19, n19);
      n20 = H2PP_TH20(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(20, n20);
      n21 = H2PP_TH21(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(21, n21);
      n22 = H2PP_TH22(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(22, n22);
      n23 = H2PP_TH23(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(23, n23);
      n24 = H2PP_TH24(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(24, n24);
      n25 = H2PP_TH25(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(25, n25);
      n26 = H2PP_TH26(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(26, n26);
      n27 = H2PP_TH27(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(27, n27);
      n28 = H2PP_TH28(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(28, n28);
      n29 = H2PP_TH29(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(29, n29);
      n30 = H2PP_TH30(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(30, n30);
      n31 = H2PP_TH31(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30) + 0;
      OK(0, n31);
   }
}
CASE(H2PP_NARG [generated])
{
   int n0 = H2PP_NARG();
   OK(0, n0);
   int n1 = H2PP_NARG(0);
   OK(1, n1);
   int n2 = H2PP_NARG(0, 1);
   OK(2, n2);
   int n3 = H2PP_NARG(0, 1, 2);
   OK(3, n3);
   int n4 = H2PP_NARG(0, 1, 2, 3);
   OK(4, n4);
   int n5 = H2PP_NARG(0, 1, 2, 3, 4);
   OK(5, n5);
   int n6 = H2PP_NARG(0, 1, 2, 3, 4, 5);
   OK(6, n6);
   int n7 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6);
   OK(7, n7);
   int n8 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7);
   OK(8, n8);
   int n9 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8);
   OK(9, n9);
   int n10 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
   OK(10, n10);
   int n11 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
   OK(11, n11);
   int n12 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
   OK(12, n12);
   int n13 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
   OK(13, n13);
   int n14 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
   OK(14, n14);
   int n15 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
   OK(15, n15);
   int n16 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
   OK(16, n16);
   int n17 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
   OK(17, n17);
   int n18 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17);
   OK(18, n18);
   int n19 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18);
   OK(19, n19);
   int n20 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19);
   OK(20, n20);
   int n21 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);
   OK(21, n21);
   int n22 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21);
   OK(22, n22);
   int n23 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22);
   OK(23, n23);
   int n24 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23);
   OK(24, n24);
   int n25 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24);
   OK(25, n25);
   int n26 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25);
   OK(26, n26);
   int n27 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26);
   OK(27, n27);
   int n28 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27);
   OK(28, n28);
   int n29 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28);
   OK(29, n29);
   int n30 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29);
   OK(30, n30);
   int n31 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30);
   OK(31, n31);
}
CASE(H2PP_VARIADIC_CALL [generated])
{
#define M0() 
#define M1(_0) _0
#define M2(_0, _1) _0 + _1
#define M3(_0, _1, _2) _0 + _1 + _2
#define M4(_0, _1, _2, _3) _0 + _1 + _2 + _3
#define M5(_0, _1, _2, _3, _4) _0 + _1 + _2 + _3 + _4
#define M6(_0, _1, _2, _3, _4, _5) _0 + _1 + _2 + _3 + _4 + _5
#define M7(_0, _1, _2, _3, _4, _5, _6) _0 + _1 + _2 + _3 + _4 + _5 + _6
#define M8(_0, _1, _2, _3, _4, _5, _6, _7) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7
#define M9(_0, _1, _2, _3, _4, _5, _6, _7, _8) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8
#define M10(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9
#define M11(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10
#define M12(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11
#define M13(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12
#define M14(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13
#define M15(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14
#define M16(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14 + _15
#define M17(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14 + _15 + _16
#define M18(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14 + _15 + _16 + _17
#define M19(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14 + _15 + _16 + _17 + _18
#define M20(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14 + _15 + _16 + _17 + _18 + _19
#define M21(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14 + _15 + _16 + _17 + _18 + _19 + _20
#define M22(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14 + _15 + _16 + _17 + _18 + _19 + _20 + _21
#define M23(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14 + _15 + _16 + _17 + _18 + _19 + _20 + _21 + _22
#define M24(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14 + _15 + _16 + _17 + _18 + _19 + _20 + _21 + _22 + _23
#define M25(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14 + _15 + _16 + _17 + _18 + _19 + _20 + _21 + _22 + _23 + _24
#define M26(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14 + _15 + _16 + _17 + _18 + _19 + _20 + _21 + _22 + _23 + _24 + _25
#define M27(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14 + _15 + _16 + _17 + _18 + _19 + _20 + _21 + _22 + _23 + _24 + _25 + _26
#define M28(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14 + _15 + _16 + _17 + _18 + _19 + _20 + _21 + _22 + _23 + _24 + _25 + _26 + _27
#define M29(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14 + _15 + _16 + _17 + _18 + _19 + _20 + _21 + _22 + _23 + _24 + _25 + _26 + _27 + _28
#define M30(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14 + _15 + _16 + _17 + _18 + _19 + _20 + _21 + _22 + _23 + _24 + _25 + _26 + _27 + _28 + _29
#define M31(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14 + _15 + _16 + _17 + _18 + _19 + _20 + _21 + _22 + _23 + _24 + _25 + _26 + _27 + _28 + _29 + _30
   int n0 = H2PP_VARIADIC_CALL(M) 0;
   OK(0, n0);
   int n1 = H2PP_VARIADIC_CALL(M, 0);
   OK(0, n1);
   int n2 = H2PP_VARIADIC_CALL(M, 0, 1);
   OK(0 + 1, n2);
   int n3 = H2PP_VARIADIC_CALL(M, 0, 1, 2);
   OK(0 + 1 + 2, n3);
   int n4 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3);
   OK(0 + 1 + 2 + 3, n4);
   int n5 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4);
   OK(0 + 1 + 2 + 3 + 4, n5);
   int n6 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5);
   OK(0 + 1 + 2 + 3 + 4 + 5, n6);
   int n7 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6, n7);
   int n8 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7, n8);
   int n9 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8, n9);
   int n10 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9, n10);
   int n11 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10, n11);
   int n12 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11, n12);
   int n13 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12, n13);
   int n14 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13, n14);
   int n15 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14, n15);
   int n16 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15, n16);
   int n17 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16, n17);
   int n18 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17, n18);
   int n19 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18, n19);
   int n20 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19, n20);
   int n21 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20, n21);
   int n22 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21, n22);
   int n23 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22, n23);
   int n24 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23, n24);
   int n25 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24, n25);
   int n26 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25, n26);
   int n27 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26, n27);
   int n28 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27, n28);
   int n29 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28, n29);
   int n30 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29, n30);
   int n31 = H2PP_VARIADIC_CALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30, n31);
#undef M0
#undef M1
#undef M2
#undef M3
#undef M4
#undef M5
#undef M6
#undef M7
#undef M8
#undef M9
#undef M10
#undef M11
#undef M12
#undef M13
#undef M14
#undef M15
#undef M16
#undef M17
#undef M18
#undef M19
#undef M20
#undef M21
#undef M22
#undef M23
#undef M24
#undef M25
#undef M26
#undef M27
#undef M28
#undef M29
#undef M30
#undef M31
}
SUITE(H2PP_REPEAT [generated])
{
   int n[32];
   for (int i = 0; i < 32; ++i) n[i] = -1;
   Case(repeat 0 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 0);
       for (int i = 0; i < 32; ++i) OK(i < 0 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 0 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 0);
       for (int i = 0; i < 32; ++i) OK(i < 0 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 1 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 1);
       for (int i = 0; i < 32; ++i) OK(i < 1 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 1 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 1);
       for (int i = 0; i < 32; ++i) OK(i < 1 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 2 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 2);
       for (int i = 0; i < 32; ++i) OK(i < 2 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 2 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 2);
       for (int i = 0; i < 32; ++i) OK(i < 2 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 3 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 3);
       for (int i = 0; i < 32; ++i) OK(i < 3 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 3 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 3);
       for (int i = 0; i < 32; ++i) OK(i < 3 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 4 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 4);
       for (int i = 0; i < 32; ++i) OK(i < 4 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 4 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 4);
       for (int i = 0; i < 32; ++i) OK(i < 4 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 5 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 5);
       for (int i = 0; i < 32; ++i) OK(i < 5 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 5 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 5);
       for (int i = 0; i < 32; ++i) OK(i < 5 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 6 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 6);
       for (int i = 0; i < 32; ++i) OK(i < 6 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 6 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 6);
       for (int i = 0; i < 32; ++i) OK(i < 6 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 7 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 7);
       for (int i = 0; i < 32; ++i) OK(i < 7 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 7 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 7);
       for (int i = 0; i < 32; ++i) OK(i < 7 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 8 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 8);
       for (int i = 0; i < 32; ++i) OK(i < 8 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 8 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 8);
       for (int i = 0; i < 32; ++i) OK(i < 8 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 9 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 9);
       for (int i = 0; i < 32; ++i) OK(i < 9 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 9 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 9);
       for (int i = 0; i < 32; ++i) OK(i < 9 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 10 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 10);
       for (int i = 0; i < 32; ++i) OK(i < 10 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 10 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 10);
       for (int i = 0; i < 32; ++i) OK(i < 10 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 11 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 11);
       for (int i = 0; i < 32; ++i) OK(i < 11 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 11 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 11);
       for (int i = 0; i < 32; ++i) OK(i < 11 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 12 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 12);
       for (int i = 0; i < 32; ++i) OK(i < 12 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 12 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 12);
       for (int i = 0; i < 32; ++i) OK(i < 12 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 13 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 13);
       for (int i = 0; i < 32; ++i) OK(i < 13 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 13 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 13);
       for (int i = 0; i < 32; ++i) OK(i < 13 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 14 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 14);
       for (int i = 0; i < 32; ++i) OK(i < 14 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 14 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 14);
       for (int i = 0; i < 32; ++i) OK(i < 14 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 15 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 15);
       for (int i = 0; i < 32; ++i) OK(i < 15 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 15 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 15);
       for (int i = 0; i < 32; ++i) OK(i < 15 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 16 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 16);
       for (int i = 0; i < 32; ++i) OK(i < 16 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 16 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 16);
       for (int i = 0; i < 32; ++i) OK(i < 16 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 17 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 17);
       for (int i = 0; i < 32; ++i) OK(i < 17 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 17 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 17);
       for (int i = 0; i < 32; ++i) OK(i < 17 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 18 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 18);
       for (int i = 0; i < 32; ++i) OK(i < 18 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 18 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 18);
       for (int i = 0; i < 32; ++i) OK(i < 18 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 19 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 19);
       for (int i = 0; i < 32; ++i) OK(i < 19 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 19 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 19);
       for (int i = 0; i < 32; ++i) OK(i < 19 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 20 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 20);
       for (int i = 0; i < 32; ++i) OK(i < 20 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 20 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 20);
       for (int i = 0; i < 32; ++i) OK(i < 20 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 21 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 21);
       for (int i = 0; i < 32; ++i) OK(i < 21 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 21 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 21);
       for (int i = 0; i < 32; ++i) OK(i < 21 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 22 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 22);
       for (int i = 0; i < 32; ++i) OK(i < 22 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 22 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 22);
       for (int i = 0; i < 32; ++i) OK(i < 22 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 23 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 23);
       for (int i = 0; i < 32; ++i) OK(i < 23 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 23 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 23);
       for (int i = 0; i < 32; ++i) OK(i < 23 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 24 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 24);
       for (int i = 0; i < 32; ++i) OK(i < 24 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 24 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 24);
       for (int i = 0; i < 32; ++i) OK(i < 24 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 25 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 25);
       for (int i = 0; i < 32; ++i) OK(i < 25 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 25 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 25);
       for (int i = 0; i < 32; ++i) OK(i < 25 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 26 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 26);
       for (int i = 0; i < 32; ++i) OK(i < 26 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 26 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 26);
       for (int i = 0; i < 32; ++i) OK(i < 26 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 27 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 27);
       for (int i = 0; i < 32; ++i) OK(i < 27 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 27 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 27);
       for (int i = 0; i < 32; ++i) OK(i < 27 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 28 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 28);
       for (int i = 0; i < 32; ++i) OK(i < 28 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 28 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 28);
       for (int i = 0; i < 32; ++i) OK(i < 28 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 29 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 29);
       for (int i = 0; i < 32; ++i) OK(i < 29 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 29 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 29);
       for (int i = 0; i < 32; ++i) OK(i < 29 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 30 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 30);
       for (int i = 0; i < 32; ++i) OK(i < 30 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 30 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 30);
       for (int i = 0; i < 32; ++i) OK(i < 30 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 31 split by comma 1 args)
   {
#define RepeatCB(a, i) n[i] = i + a
H2PP_REPEAT((, ), RepeatCB, 1, 31);
       for (int i = 0; i < 32; ++i) OK(i < 31 ? i + 1 : -1, n[i]);
#undef RepeatCB
   }
   Case(repeat 31 split by space 2 args)
   {
#define ADD(a, b) a + b
#define RepeatCB(ab, i) n[i] = i + ADD ab;
H2PP_REPEAT( , RepeatCB, (1, 2), 31);
       for (int i = 0; i < 32; ++i) OK(i < 31 ? i + 1 + 2 : -1, n[i]);
#undef RepeatCB
   }
}
SUITE(H2PP_FOREACH [generated])
{
   int n[32];
   for (int i = 0; i < 32; ++i) n[i] = -1;
   Case(foreach 0 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), );
       for (int i = 0; i < 32; ++i) OK(i < 0 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 0 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), );
       for (int i = 0; i < 32; ++i) OK(i < 0 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 1 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0);
       for (int i = 0; i < 32; ++i) OK(i < 1 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 1 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0);
       for (int i = 0; i < 32; ++i) OK(i < 1 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 2 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1);
       for (int i = 0; i < 32; ++i) OK(i < 2 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 2 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1);
       for (int i = 0; i < 32; ++i) OK(i < 2 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 3 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2);
       for (int i = 0; i < 32; ++i) OK(i < 3 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 3 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2);
       for (int i = 0; i < 32; ++i) OK(i < 3 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 4 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3);
       for (int i = 0; i < 32; ++i) OK(i < 4 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 4 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3);
       for (int i = 0; i < 32; ++i) OK(i < 4 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 5 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4);
       for (int i = 0; i < 32; ++i) OK(i < 5 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 5 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4);
       for (int i = 0; i < 32; ++i) OK(i < 5 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 6 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5);
       for (int i = 0; i < 32; ++i) OK(i < 6 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 6 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5);
       for (int i = 0; i < 32; ++i) OK(i < 6 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 7 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6);
       for (int i = 0; i < 32; ++i) OK(i < 7 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 7 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6);
       for (int i = 0; i < 32; ++i) OK(i < 7 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 8 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7);
       for (int i = 0; i < 32; ++i) OK(i < 8 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 8 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7);
       for (int i = 0; i < 32; ++i) OK(i < 8 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 9 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8);
       for (int i = 0; i < 32; ++i) OK(i < 9 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 9 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8);
       for (int i = 0; i < 32; ++i) OK(i < 9 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 10 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
       for (int i = 0; i < 32; ++i) OK(i < 10 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 10 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
       for (int i = 0; i < 32; ++i) OK(i < 10 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 11 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
       for (int i = 0; i < 32; ++i) OK(i < 11 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 11 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
       for (int i = 0; i < 32; ++i) OK(i < 11 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 12 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
       for (int i = 0; i < 32; ++i) OK(i < 12 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 12 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
       for (int i = 0; i < 32; ++i) OK(i < 12 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 13 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
       for (int i = 0; i < 32; ++i) OK(i < 13 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 13 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
       for (int i = 0; i < 32; ++i) OK(i < 13 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 14 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
       for (int i = 0; i < 32; ++i) OK(i < 14 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 14 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
       for (int i = 0; i < 32; ++i) OK(i < 14 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 15 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
       for (int i = 0; i < 32; ++i) OK(i < 15 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 15 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
       for (int i = 0; i < 32; ++i) OK(i < 15 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 16 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
       for (int i = 0; i < 32; ++i) OK(i < 16 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 16 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
       for (int i = 0; i < 32; ++i) OK(i < 16 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 17 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
       for (int i = 0; i < 32; ++i) OK(i < 17 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 17 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
       for (int i = 0; i < 32; ++i) OK(i < 17 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 18 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17);
       for (int i = 0; i < 32; ++i) OK(i < 18 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 18 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17);
       for (int i = 0; i < 32; ++i) OK(i < 18 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 19 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18);
       for (int i = 0; i < 32; ++i) OK(i < 19 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 19 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18);
       for (int i = 0; i < 32; ++i) OK(i < 19 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 20 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19);
       for (int i = 0; i < 32; ++i) OK(i < 20 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 20 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19);
       for (int i = 0; i < 32; ++i) OK(i < 20 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 21 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);
       for (int i = 0; i < 32; ++i) OK(i < 21 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 21 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);
       for (int i = 0; i < 32; ++i) OK(i < 21 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 22 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21);
       for (int i = 0; i < 32; ++i) OK(i < 22 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 22 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21);
       for (int i = 0; i < 32; ++i) OK(i < 22 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 23 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22);
       for (int i = 0; i < 32; ++i) OK(i < 23 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 23 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22);
       for (int i = 0; i < 32; ++i) OK(i < 23 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 24 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23);
       for (int i = 0; i < 32; ++i) OK(i < 24 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 24 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23);
       for (int i = 0; i < 32; ++i) OK(i < 24 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 25 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24);
       for (int i = 0; i < 32; ++i) OK(i < 25 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 25 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24);
       for (int i = 0; i < 32; ++i) OK(i < 25 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 26 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25);
       for (int i = 0; i < 32; ++i) OK(i < 26 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 26 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25);
       for (int i = 0; i < 32; ++i) OK(i < 26 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 27 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26);
       for (int i = 0; i < 32; ++i) OK(i < 27 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 27 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26);
       for (int i = 0; i < 32; ++i) OK(i < 27 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 28 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27);
       for (int i = 0; i < 32; ++i) OK(i < 28 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 28 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27);
       for (int i = 0; i < 32; ++i) OK(i < 28 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 29 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28);
       for (int i = 0; i < 32; ++i) OK(i < 29 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 29 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28);
       for (int i = 0; i < 32; ++i) OK(i < 29 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 30 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29);
       for (int i = 0; i < 32; ++i) OK(i < 30 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 30 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29);
       for (int i = 0; i < 32; ++i) OK(i < 30 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 31 split by comma 0 args)
   {
#define ForEachCB(Dummy, i, x) n[i] = i + x
H2PP_FOREACH((, ), ForEachCB, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30);
       for (int i = 0; i < 32; ++i) OK(i < 31 ? i * 2 : -1, n[i]);
#undef ForEachCB
   }
   Case(foreach 31 split by semicolon 1 args)
   {
#define ForEachCB(a, i, x) n[i] = i + x + a
H2PP_FOREACH((; ), ForEachCB, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30);
       for (int i = 0; i < 32; ++i) OK(i < 31 ? i * 2 + 1 : -1, n[i]);
#undef ForEachCB
   }
}
SUITE(H2PP_FULLMESH [generated])
{
   int n[32][32];
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j) n[i][j] = -1;
   Case(fullmesh 0 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), ());
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 0 && j < 0 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 0 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (), ());
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 0 && j < 0 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 1 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 1 && j < 1 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 1 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0), (0));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 1 && j < 1 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 2 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 2 && j < 2 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 2 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1), (0, 1));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 2 && j < 2 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 3 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 3 && j < 3 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 3 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2), (0, 1, 2));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 3 && j < 3 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 4 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 4 && j < 4 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 4 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3), (0, 1, 2, 3));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 4 && j < 4 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 5 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 5 && j < 5 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 5 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4), (0, 1, 2, 3, 4));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 5 && j < 5 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 6 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 6 && j < 6 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 6 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5), (0, 1, 2, 3, 4, 5));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 6 && j < 6 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 7 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 7 && j < 7 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 7 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6), (0, 1, 2, 3, 4, 5, 6));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 7 && j < 7 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 8 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 8 && j < 8 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 8 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7), (0, 1, 2, 3, 4, 5, 6, 7));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 8 && j < 8 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 9 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 9 && j < 9 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 9 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8), (0, 1, 2, 3, 4, 5, 6, 7, 8));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 9 && j < 9 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 10 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 10 && j < 10 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 10 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 10 && j < 10 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 11 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 11 && j < 11 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 11 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 11 && j < 11 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 12 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 12 && j < 12 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 12 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 12 && j < 12 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 13 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 13 && j < 13 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 13 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 13 && j < 13 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 14 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 14 && j < 14 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 14 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 14 && j < 14 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 15 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 15 && j < 15 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 15 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 15 && j < 15 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 16 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 16 && j < 16 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 16 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 16 && j < 16 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 17 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 17 && j < 17 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 17 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 17 && j < 17 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 18 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 18 && j < 18 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 18 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 18 && j < 18 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 19 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 19 && j < 19 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 19 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 19 && j < 19 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 20 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 20 && j < 20 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 20 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 20 && j < 20 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 21 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 21 && j < 21 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 21 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 21 && j < 21 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 22 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 22 && j < 22 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 22 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 22 && j < 22 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 23 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 23 && j < 23 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 23 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 23 && j < 23 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 24 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 24 && j < 24 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 24 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 24 && j < 24 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 25 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 25 && j < 25 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 25 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 25 && j < 25 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 26 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 26 && j < 26 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 26 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 26 && j < 26 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 27 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 27 && j < 27 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 27 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 27 && j < 27 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 28 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 28 && j < 28 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 28 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 28 && j < 28 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 29 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 29 && j < 29 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 29 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 29 && j < 29 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 30 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 30 && j < 30 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 30 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 30 && j < 30 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 31 split by comma 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 31 && j < 31 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
   Case(fullmesh 31 split by semicolon 1 args)
   {
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30));
   for (int i = 0; i < 32; ++i) for (int j = 0; j < 32; ++j)
      OK( i < 31 && j < 31 ? i*10000 + j*100 + 1 : -1, n[i][j]);
#undef FullMeshCB
   }
}
