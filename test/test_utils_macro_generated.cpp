//////// generated by test/test_utils_macro_generate.py do not edit
#include "../source/h2_unit.cpp"
SUITE(H2PP_TH [generated])
{
   int n0 = -1;
   int n1 = -1;
   int n2 = -1;
   int n3 = -1;
   int n4 = -1;
   int n5 = -1;
   int n6 = -1;
   int n7 = -1;
   int n8 = -1;
   int n9 = -1;
   int n10 = -1;
   int n11 = -1;
   int n12 = -1;
   int n13 = -1;
   int n14 = -1;
   int n15 = -1;
   Case(0 arguments)
   {
      n0 = H2PP_TH0() + 0;
      OK(0, n0);
      n1 = H2PP_TH1() + 0;
      OK(0, n1);
      n2 = H2PP_TH2() + 0;
      OK(0, n2);
      n3 = H2PP_TH3() + 0;
      OK(0, n3);
      n4 = H2PP_TH4() + 0;
      OK(0, n4);
      n5 = H2PP_TH5() + 0;
      OK(0, n5);
      n6 = H2PP_TH6() + 0;
      OK(0, n6);
      n7 = H2PP_TH7() + 0;
      OK(0, n7);
      n8 = H2PP_TH8() + 0;
      OK(0, n8);
      n9 = H2PP_TH9() + 0;
      OK(0, n9);
      n10 = H2PP_TH10() + 0;
      OK(0, n10);
      n11 = H2PP_TH11() + 0;
      OK(0, n11);
      n12 = H2PP_TH12() + 0;
      OK(0, n12);
      n13 = H2PP_TH13() + 0;
      OK(0, n13);
      n14 = H2PP_TH14() + 0;
      OK(0, n14);
      n15 = H2PP_TH15() + 0;
      OK(0, n15);
   }
   Case(1 arguments)
   {
      n0 = H2PP_TH0(0) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0) + 0;
      OK(0, n1);
      n2 = H2PP_TH2(0) + 0;
      OK(0, n2);
      n3 = H2PP_TH3(0) + 0;
      OK(0, n3);
      n4 = H2PP_TH4(0) + 0;
      OK(0, n4);
      n5 = H2PP_TH5(0) + 0;
      OK(0, n5);
      n6 = H2PP_TH6(0) + 0;
      OK(0, n6);
      n7 = H2PP_TH7(0) + 0;
      OK(0, n7);
      n8 = H2PP_TH8(0) + 0;
      OK(0, n8);
      n9 = H2PP_TH9(0) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0) + 0;
      OK(0, n15);
   }
   Case(2 arguments)
   {
      n0 = H2PP_TH0(0, 1) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1) + 0;
      OK(0, n2);
      n3 = H2PP_TH3(0, 1) + 0;
      OK(0, n3);
      n4 = H2PP_TH4(0, 1) + 0;
      OK(0, n4);
      n5 = H2PP_TH5(0, 1) + 0;
      OK(0, n5);
      n6 = H2PP_TH6(0, 1) + 0;
      OK(0, n6);
      n7 = H2PP_TH7(0, 1) + 0;
      OK(0, n7);
      n8 = H2PP_TH8(0, 1) + 0;
      OK(0, n8);
      n9 = H2PP_TH9(0, 1) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0, 1) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1) + 0;
      OK(0, n15);
   }
   Case(3 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2) + 0;
      OK(0, n3);
      n4 = H2PP_TH4(0, 1, 2) + 0;
      OK(0, n4);
      n5 = H2PP_TH5(0, 1, 2) + 0;
      OK(0, n5);
      n6 = H2PP_TH6(0, 1, 2) + 0;
      OK(0, n6);
      n7 = H2PP_TH7(0, 1, 2) + 0;
      OK(0, n7);
      n8 = H2PP_TH8(0, 1, 2) + 0;
      OK(0, n8);
      n9 = H2PP_TH9(0, 1, 2) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0, 1, 2) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1, 2) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2) + 0;
      OK(0, n15);
   }
   Case(4 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3) + 0;
      OK(0, n4);
      n5 = H2PP_TH5(0, 1, 2, 3) + 0;
      OK(0, n5);
      n6 = H2PP_TH6(0, 1, 2, 3) + 0;
      OK(0, n6);
      n7 = H2PP_TH7(0, 1, 2, 3) + 0;
      OK(0, n7);
      n8 = H2PP_TH8(0, 1, 2, 3) + 0;
      OK(0, n8);
      n9 = H2PP_TH9(0, 1, 2, 3) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0, 1, 2, 3) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1, 2, 3) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2, 3) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3) + 0;
      OK(0, n15);
   }
   Case(5 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4) + 0;
      OK(0, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4) + 0;
      OK(0, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4) + 0;
      OK(0, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4) + 0;
      OK(0, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4) + 0;
      OK(0, n15);
   }
   Case(6 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5) + 0;
      OK(0, n15);
   }
   Case(7 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6) + 0;
      OK(0, n15);
   }
   Case(8 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7) + 0;
      OK(0, n15);
   }
   Case(9 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8) + 0;
      OK(0, n15);
   }
   Case(10 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9) + 0;
      OK(0, n15);
   }
   Case(11 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) + 0;
      OK(0, n15);
   }
   Case(12 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) + 0;
      OK(0, n15);
   }
   Case(13 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12) + 0;
      OK(0, n15);
   }
   Case(14 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) + 0;
      OK(0, n15);
   }
   Case(15 arguments)
   {
      n0 = H2PP_TH0(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n0);
      n1 = H2PP_TH1(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(1, n1);
      n2 = H2PP_TH2(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(2, n2);
      n3 = H2PP_TH3(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(3, n3);
      n4 = H2PP_TH4(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(4, n4);
      n5 = H2PP_TH5(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(5, n5);
      n6 = H2PP_TH6(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(6, n6);
      n7 = H2PP_TH7(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(7, n7);
      n8 = H2PP_TH8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(8, n8);
      n9 = H2PP_TH9(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(9, n9);
      n10 = H2PP_TH10(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(10, n10);
      n11 = H2PP_TH11(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(11, n11);
      n12 = H2PP_TH12(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(12, n12);
      n13 = H2PP_TH13(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(13, n13);
      n14 = H2PP_TH14(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(14, n14);
      n15 = H2PP_TH15(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) + 0;
      OK(0, n15);
   }
}
CASE(H2PP_NARG [generated])
{
   int n0 = H2PP_NARG();
   OK(0, n0);
   int n1 = H2PP_NARG(0);
   OK(1, n1);
   int n2 = H2PP_NARG(0, 1);
   OK(2, n2);
   int n3 = H2PP_NARG(0, 1, 2);
   OK(3, n3);
   int n4 = H2PP_NARG(0, 1, 2, 3);
   OK(4, n4);
   int n5 = H2PP_NARG(0, 1, 2, 3, 4);
   OK(5, n5);
   int n6 = H2PP_NARG(0, 1, 2, 3, 4, 5);
   OK(6, n6);
   int n7 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6);
   OK(7, n7);
   int n8 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7);
   OK(8, n8);
   int n9 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8);
   OK(9, n9);
   int n10 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
   OK(10, n10);
   int n11 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
   OK(11, n11);
   int n12 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
   OK(12, n12);
   int n13 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
   OK(13, n13);
   int n14 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
   OK(14, n14);
   int n15 = H2PP_NARG(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
   OK(15, n15);
}
SUITE(H2PP_NCALL [generated])
{
#define M__0(...) 100
#define M__1(...) 101
   Case(ncall 0)
   {
      int a0 = H2PP_NCALL(M__, 0 );
      OK(101, a0);
      int a1 = H2PP_NCALL(M__, 0 , 0);
      OK(100, a1);
   }
   Case(ncall 1)
   {
      int a0 = H2PP_NCALL(M__, 1 );
      OK(100, a0);
      int a1 = H2PP_NCALL(M__, 1 , 0);
      OK(101, a1);
      int a2 = H2PP_NCALL(M__, 1 , 0 , 1);
      OK(100, a2);
   }
   Case(ncall 2)
   {
      int a0 = H2PP_NCALL(M__, 2 );
      OK(100, a0);
      int a1 = H2PP_NCALL(M__, 2 , 0);
      OK(100, a1);
      int a2 = H2PP_NCALL(M__, 2 , 0 , 1);
      OK(101, a2);
      int a3 = H2PP_NCALL(M__, 2 , 0 , 1 , 2);
      OK(100, a3);
   }
   Case(ncall 3)
   {
      int a0 = H2PP_NCALL(M__, 3 );
      OK(100, a0);
      int a1 = H2PP_NCALL(M__, 3 , 0);
      OK(100, a1);
      int a2 = H2PP_NCALL(M__, 3 , 0 , 1);
      OK(100, a2);
      int a3 = H2PP_NCALL(M__, 3 , 0 , 1 , 2);
      OK(101, a3);
      int a4 = H2PP_NCALL(M__, 3 , 0 , 1 , 2 , 3);
      OK(100, a4);
   }
   Case(ncall 4)
   {
      int a0 = H2PP_NCALL(M__, 4 );
      OK(100, a0);
      int a1 = H2PP_NCALL(M__, 4 , 0);
      OK(100, a1);
      int a2 = H2PP_NCALL(M__, 4 , 0 , 1);
      OK(100, a2);
      int a3 = H2PP_NCALL(M__, 4 , 0 , 1 , 2);
      OK(100, a3);
      int a4 = H2PP_NCALL(M__, 4 , 0 , 1 , 2 , 3);
      OK(101, a4);
      int a5 = H2PP_NCALL(M__, 4 , 0 , 1 , 2 , 3 , 4);
      OK(100, a5);
   }
   Case(ncall 5)
   {
      int a0 = H2PP_NCALL(M__, 5 );
      OK(100, a0);
      int a1 = H2PP_NCALL(M__, 5 , 0);
      OK(100, a1);
      int a2 = H2PP_NCALL(M__, 5 , 0 , 1);
      OK(100, a2);
      int a3 = H2PP_NCALL(M__, 5 , 0 , 1 , 2);
      OK(100, a3);
      int a4 = H2PP_NCALL(M__, 5 , 0 , 1 , 2 , 3);
      OK(100, a4);
      int a5 = H2PP_NCALL(M__, 5 , 0 , 1 , 2 , 3 , 4);
      OK(101, a5);
      int a6 = H2PP_NCALL(M__, 5 , 0 , 1 , 2 , 3 , 4 , 5);
      OK(100, a6);
   }
   Case(ncall 6)
   {
      int a0 = H2PP_NCALL(M__, 6 );
      OK(100, a0);
      int a1 = H2PP_NCALL(M__, 6 , 0);
      OK(100, a1);
      int a2 = H2PP_NCALL(M__, 6 , 0 , 1);
      OK(100, a2);
      int a3 = H2PP_NCALL(M__, 6 , 0 , 1 , 2);
      OK(100, a3);
      int a4 = H2PP_NCALL(M__, 6 , 0 , 1 , 2 , 3);
      OK(100, a4);
      int a5 = H2PP_NCALL(M__, 6 , 0 , 1 , 2 , 3 , 4);
      OK(100, a5);
      int a6 = H2PP_NCALL(M__, 6 , 0 , 1 , 2 , 3 , 4 , 5);
      OK(101, a6);
      int a7 = H2PP_NCALL(M__, 6 , 0 , 1 , 2 , 3 , 4 , 5 , 6);
      OK(100, a7);
   }
   Case(ncall 7)
   {
      int a0 = H2PP_NCALL(M__, 7 );
      OK(100, a0);
      int a1 = H2PP_NCALL(M__, 7 , 0);
      OK(100, a1);
      int a2 = H2PP_NCALL(M__, 7 , 0 , 1);
      OK(100, a2);
      int a3 = H2PP_NCALL(M__, 7 , 0 , 1 , 2);
      OK(100, a3);
      int a4 = H2PP_NCALL(M__, 7 , 0 , 1 , 2 , 3);
      OK(100, a4);
      int a5 = H2PP_NCALL(M__, 7 , 0 , 1 , 2 , 3 , 4);
      OK(100, a5);
      int a6 = H2PP_NCALL(M__, 7 , 0 , 1 , 2 , 3 , 4 , 5);
      OK(100, a6);
      int a7 = H2PP_NCALL(M__, 7 , 0 , 1 , 2 , 3 , 4 , 5 , 6);
      OK(101, a7);
      int a8 = H2PP_NCALL(M__, 7 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7);
      OK(100, a8);
   }
   Case(ncall 8)
   {
      int a0 = H2PP_NCALL(M__, 8 );
      OK(100, a0);
      int a1 = H2PP_NCALL(M__, 8 , 0);
      OK(100, a1);
      int a2 = H2PP_NCALL(M__, 8 , 0 , 1);
      OK(100, a2);
      int a3 = H2PP_NCALL(M__, 8 , 0 , 1 , 2);
      OK(100, a3);
      int a4 = H2PP_NCALL(M__, 8 , 0 , 1 , 2 , 3);
      OK(100, a4);
      int a5 = H2PP_NCALL(M__, 8 , 0 , 1 , 2 , 3 , 4);
      OK(100, a5);
      int a6 = H2PP_NCALL(M__, 8 , 0 , 1 , 2 , 3 , 4 , 5);
      OK(100, a6);
      int a7 = H2PP_NCALL(M__, 8 , 0 , 1 , 2 , 3 , 4 , 5 , 6);
      OK(100, a7);
      int a8 = H2PP_NCALL(M__, 8 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7);
      OK(101, a8);
      int a9 = H2PP_NCALL(M__, 8 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8);
      OK(100, a9);
   }
   Case(ncall 9)
   {
      int a0 = H2PP_NCALL(M__, 9 );
      OK(100, a0);
      int a1 = H2PP_NCALL(M__, 9 , 0);
      OK(100, a1);
      int a2 = H2PP_NCALL(M__, 9 , 0 , 1);
      OK(100, a2);
      int a3 = H2PP_NCALL(M__, 9 , 0 , 1 , 2);
      OK(100, a3);
      int a4 = H2PP_NCALL(M__, 9 , 0 , 1 , 2 , 3);
      OK(100, a4);
      int a5 = H2PP_NCALL(M__, 9 , 0 , 1 , 2 , 3 , 4);
      OK(100, a5);
      int a6 = H2PP_NCALL(M__, 9 , 0 , 1 , 2 , 3 , 4 , 5);
      OK(100, a6);
      int a7 = H2PP_NCALL(M__, 9 , 0 , 1 , 2 , 3 , 4 , 5 , 6);
      OK(100, a7);
      int a8 = H2PP_NCALL(M__, 9 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7);
      OK(100, a8);
      int a9 = H2PP_NCALL(M__, 9 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8);
      OK(101, a9);
      int a10 = H2PP_NCALL(M__, 9 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9);
      OK(100, a10);
   }
   Case(ncall 10)
   {
      int a0 = H2PP_NCALL(M__, 10 );
      OK(100, a0);
      int a1 = H2PP_NCALL(M__, 10 , 0);
      OK(100, a1);
      int a2 = H2PP_NCALL(M__, 10 , 0 , 1);
      OK(100, a2);
      int a3 = H2PP_NCALL(M__, 10 , 0 , 1 , 2);
      OK(100, a3);
      int a4 = H2PP_NCALL(M__, 10 , 0 , 1 , 2 , 3);
      OK(100, a4);
      int a5 = H2PP_NCALL(M__, 10 , 0 , 1 , 2 , 3 , 4);
      OK(100, a5);
      int a6 = H2PP_NCALL(M__, 10 , 0 , 1 , 2 , 3 , 4 , 5);
      OK(100, a6);
      int a7 = H2PP_NCALL(M__, 10 , 0 , 1 , 2 , 3 , 4 , 5 , 6);
      OK(100, a7);
      int a8 = H2PP_NCALL(M__, 10 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7);
      OK(100, a8);
      int a9 = H2PP_NCALL(M__, 10 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8);
      OK(100, a9);
      int a10 = H2PP_NCALL(M__, 10 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9);
      OK(101, a10);
      int a11 = H2PP_NCALL(M__, 10 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10);
      OK(100, a11);
   }
   Case(ncall 11)
   {
      int a0 = H2PP_NCALL(M__, 11 );
      OK(100, a0);
      int a1 = H2PP_NCALL(M__, 11 , 0);
      OK(100, a1);
      int a2 = H2PP_NCALL(M__, 11 , 0 , 1);
      OK(100, a2);
      int a3 = H2PP_NCALL(M__, 11 , 0 , 1 , 2);
      OK(100, a3);
      int a4 = H2PP_NCALL(M__, 11 , 0 , 1 , 2 , 3);
      OK(100, a4);
      int a5 = H2PP_NCALL(M__, 11 , 0 , 1 , 2 , 3 , 4);
      OK(100, a5);
      int a6 = H2PP_NCALL(M__, 11 , 0 , 1 , 2 , 3 , 4 , 5);
      OK(100, a6);
      int a7 = H2PP_NCALL(M__, 11 , 0 , 1 , 2 , 3 , 4 , 5 , 6);
      OK(100, a7);
      int a8 = H2PP_NCALL(M__, 11 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7);
      OK(100, a8);
      int a9 = H2PP_NCALL(M__, 11 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8);
      OK(100, a9);
      int a10 = H2PP_NCALL(M__, 11 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9);
      OK(100, a10);
      int a11 = H2PP_NCALL(M__, 11 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10);
      OK(101, a11);
      int a12 = H2PP_NCALL(M__, 11 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11);
      OK(100, a12);
   }
   Case(ncall 12)
   {
      int a0 = H2PP_NCALL(M__, 12 );
      OK(100, a0);
      int a1 = H2PP_NCALL(M__, 12 , 0);
      OK(100, a1);
      int a2 = H2PP_NCALL(M__, 12 , 0 , 1);
      OK(100, a2);
      int a3 = H2PP_NCALL(M__, 12 , 0 , 1 , 2);
      OK(100, a3);
      int a4 = H2PP_NCALL(M__, 12 , 0 , 1 , 2 , 3);
      OK(100, a4);
      int a5 = H2PP_NCALL(M__, 12 , 0 , 1 , 2 , 3 , 4);
      OK(100, a5);
      int a6 = H2PP_NCALL(M__, 12 , 0 , 1 , 2 , 3 , 4 , 5);
      OK(100, a6);
      int a7 = H2PP_NCALL(M__, 12 , 0 , 1 , 2 , 3 , 4 , 5 , 6);
      OK(100, a7);
      int a8 = H2PP_NCALL(M__, 12 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7);
      OK(100, a8);
      int a9 = H2PP_NCALL(M__, 12 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8);
      OK(100, a9);
      int a10 = H2PP_NCALL(M__, 12 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9);
      OK(100, a10);
      int a11 = H2PP_NCALL(M__, 12 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10);
      OK(100, a11);
      int a12 = H2PP_NCALL(M__, 12 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11);
      OK(101, a12);
      int a13 = H2PP_NCALL(M__, 12 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12);
      OK(100, a13);
   }
   Case(ncall 13)
   {
      int a0 = H2PP_NCALL(M__, 13 );
      OK(100, a0);
      int a1 = H2PP_NCALL(M__, 13 , 0);
      OK(100, a1);
      int a2 = H2PP_NCALL(M__, 13 , 0 , 1);
      OK(100, a2);
      int a3 = H2PP_NCALL(M__, 13 , 0 , 1 , 2);
      OK(100, a3);
      int a4 = H2PP_NCALL(M__, 13 , 0 , 1 , 2 , 3);
      OK(100, a4);
      int a5 = H2PP_NCALL(M__, 13 , 0 , 1 , 2 , 3 , 4);
      OK(100, a5);
      int a6 = H2PP_NCALL(M__, 13 , 0 , 1 , 2 , 3 , 4 , 5);
      OK(100, a6);
      int a7 = H2PP_NCALL(M__, 13 , 0 , 1 , 2 , 3 , 4 , 5 , 6);
      OK(100, a7);
      int a8 = H2PP_NCALL(M__, 13 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7);
      OK(100, a8);
      int a9 = H2PP_NCALL(M__, 13 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8);
      OK(100, a9);
      int a10 = H2PP_NCALL(M__, 13 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9);
      OK(100, a10);
      int a11 = H2PP_NCALL(M__, 13 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10);
      OK(100, a11);
      int a12 = H2PP_NCALL(M__, 13 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11);
      OK(100, a12);
      int a13 = H2PP_NCALL(M__, 13 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12);
      OK(101, a13);
      int a14 = H2PP_NCALL(M__, 13 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13);
      OK(100, a14);
   }
   Case(ncall 14)
   {
      int a0 = H2PP_NCALL(M__, 14 );
      OK(100, a0);
      int a1 = H2PP_NCALL(M__, 14 , 0);
      OK(100, a1);
      int a2 = H2PP_NCALL(M__, 14 , 0 , 1);
      OK(100, a2);
      int a3 = H2PP_NCALL(M__, 14 , 0 , 1 , 2);
      OK(100, a3);
      int a4 = H2PP_NCALL(M__, 14 , 0 , 1 , 2 , 3);
      OK(100, a4);
      int a5 = H2PP_NCALL(M__, 14 , 0 , 1 , 2 , 3 , 4);
      OK(100, a5);
      int a6 = H2PP_NCALL(M__, 14 , 0 , 1 , 2 , 3 , 4 , 5);
      OK(100, a6);
      int a7 = H2PP_NCALL(M__, 14 , 0 , 1 , 2 , 3 , 4 , 5 , 6);
      OK(100, a7);
      int a8 = H2PP_NCALL(M__, 14 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7);
      OK(100, a8);
      int a9 = H2PP_NCALL(M__, 14 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8);
      OK(100, a9);
      int a10 = H2PP_NCALL(M__, 14 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9);
      OK(100, a10);
      int a11 = H2PP_NCALL(M__, 14 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10);
      OK(100, a11);
      int a12 = H2PP_NCALL(M__, 14 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11);
      OK(100, a12);
      int a13 = H2PP_NCALL(M__, 14 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12);
      OK(100, a13);
      int a14 = H2PP_NCALL(M__, 14 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13);
      OK(101, a14);
      int a15 = H2PP_NCALL(M__, 14 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14);
      OK(100, a15);
   }
   Case(ncall 15)
   {
      int a0 = H2PP_NCALL(M__, 15 );
      OK(100, a0);
      int a1 = H2PP_NCALL(M__, 15 , 0);
      OK(100, a1);
      int a2 = H2PP_NCALL(M__, 15 , 0 , 1);
      OK(100, a2);
      int a3 = H2PP_NCALL(M__, 15 , 0 , 1 , 2);
      OK(100, a3);
      int a4 = H2PP_NCALL(M__, 15 , 0 , 1 , 2 , 3);
      OK(100, a4);
      int a5 = H2PP_NCALL(M__, 15 , 0 , 1 , 2 , 3 , 4);
      OK(100, a5);
      int a6 = H2PP_NCALL(M__, 15 , 0 , 1 , 2 , 3 , 4 , 5);
      OK(100, a6);
      int a7 = H2PP_NCALL(M__, 15 , 0 , 1 , 2 , 3 , 4 , 5 , 6);
      OK(100, a7);
      int a8 = H2PP_NCALL(M__, 15 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7);
      OK(100, a8);
      int a9 = H2PP_NCALL(M__, 15 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8);
      OK(100, a9);
      int a10 = H2PP_NCALL(M__, 15 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9);
      OK(100, a10);
      int a11 = H2PP_NCALL(M__, 15 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10);
      OK(100, a11);
      int a12 = H2PP_NCALL(M__, 15 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11);
      OK(100, a12);
      int a13 = H2PP_NCALL(M__, 15 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12);
      OK(100, a13);
      int a14 = H2PP_NCALL(M__, 15 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13);
      OK(100, a14);
      int a15 = H2PP_NCALL(M__, 15 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14);
      OK(101, a15);
      int a16 = H2PP_NCALL(M__, 15 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15);
      OK(100, a16);
   }
#undef M__0
#undef M__1
}
CASE(H2PP_VCALL [generated])
{
#define M0() 
#define M1(_0) _0
#define M2(_0, _1) _0 + _1
#define M3(_0, _1, _2) _0 + _1 + _2
#define M4(_0, _1, _2, _3) _0 + _1 + _2 + _3
#define M5(_0, _1, _2, _3, _4) _0 + _1 + _2 + _3 + _4
#define M6(_0, _1, _2, _3, _4, _5) _0 + _1 + _2 + _3 + _4 + _5
#define M7(_0, _1, _2, _3, _4, _5, _6) _0 + _1 + _2 + _3 + _4 + _5 + _6
#define M8(_0, _1, _2, _3, _4, _5, _6, _7) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7
#define M9(_0, _1, _2, _3, _4, _5, _6, _7, _8) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8
#define M10(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9
#define M11(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10
#define M12(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11
#define M13(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12
#define M14(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13
#define M15(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14) _0 + _1 + _2 + _3 + _4 + _5 + _6 + _7 + _8 + _9 + _10 + _11 + _12 + _13 + _14
   int n0 = H2PP_VCALL(M) 0;
   OK(0, n0);
   int n1 = H2PP_VCALL(M, 0);
   OK(0, n1);
   int n2 = H2PP_VCALL(M, 0, 1);
   OK(0 + 1, n2);
   int n3 = H2PP_VCALL(M, 0, 1, 2);
   OK(0 + 1 + 2, n3);
   int n4 = H2PP_VCALL(M, 0, 1, 2, 3);
   OK(0 + 1 + 2 + 3, n4);
   int n5 = H2PP_VCALL(M, 0, 1, 2, 3, 4);
   OK(0 + 1 + 2 + 3 + 4, n5);
   int n6 = H2PP_VCALL(M, 0, 1, 2, 3, 4, 5);
   OK(0 + 1 + 2 + 3 + 4 + 5, n6);
   int n7 = H2PP_VCALL(M, 0, 1, 2, 3, 4, 5, 6);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6, n7);
   int n8 = H2PP_VCALL(M, 0, 1, 2, 3, 4, 5, 6, 7);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7, n8);
   int n9 = H2PP_VCALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8, n9);
   int n10 = H2PP_VCALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9, n10);
   int n11 = H2PP_VCALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10, n11);
   int n12 = H2PP_VCALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11, n12);
   int n13 = H2PP_VCALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12, n13);
   int n14 = H2PP_VCALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13, n14);
   int n15 = H2PP_VCALL(M, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
   OK(0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14, n15);
#undef M0
#undef M1
#undef M2
#undef M3
#undef M4
#undef M5
#undef M6
#undef M7
#undef M8
#undef M9
#undef M10
#undef M11
#undef M12
#undef M13
#undef M14
#undef M15
}
SUITE(H2PP_REPEAT [generated])
{
#define RepeatCB_comma(a, i) n[i] = i + a
#define ADD5r(a, b) a + b
#define RepeatCB_space(ab, i) n[i] = i + ADD5r ab;
   int fails = 0;
   int n[16];
   for (int i = 0; i < 16; ++i) n[i] = -1;
   Case(repeat 0 split by comma 1 args)
   {
      H2PP_REPEAT((, ), RepeatCB_comma, 1, 0);
      for (int i = 0; i < 16; ++i) if((i < 0 ? i + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 0 split by space 2 args)
   {
      H2PP_REPEAT( , RepeatCB_space, (1, 2), 0);
      for (int i = 0; i < 16; ++i) if((i < 0 ? i + 1 + 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 1 split by comma 1 args)
   {
      H2PP_REPEAT((, ), RepeatCB_comma, 1, 1);
      for (int i = 0; i < 16; ++i) if((i < 1 ? i + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 1 split by space 2 args)
   {
      H2PP_REPEAT( , RepeatCB_space, (1, 2), 1);
      for (int i = 0; i < 16; ++i) if((i < 1 ? i + 1 + 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 2 split by comma 1 args)
   {
      H2PP_REPEAT((, ), RepeatCB_comma, 1, 2);
      for (int i = 0; i < 16; ++i) if((i < 2 ? i + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 2 split by space 2 args)
   {
      H2PP_REPEAT( , RepeatCB_space, (1, 2), 2);
      for (int i = 0; i < 16; ++i) if((i < 2 ? i + 1 + 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 3 split by comma 1 args)
   {
      H2PP_REPEAT((, ), RepeatCB_comma, 1, 3);
      for (int i = 0; i < 16; ++i) if((i < 3 ? i + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 3 split by space 2 args)
   {
      H2PP_REPEAT( , RepeatCB_space, (1, 2), 3);
      for (int i = 0; i < 16; ++i) if((i < 3 ? i + 1 + 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 4 split by comma 1 args)
   {
      H2PP_REPEAT((, ), RepeatCB_comma, 1, 4);
      for (int i = 0; i < 16; ++i) if((i < 4 ? i + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 4 split by space 2 args)
   {
      H2PP_REPEAT( , RepeatCB_space, (1, 2), 4);
      for (int i = 0; i < 16; ++i) if((i < 4 ? i + 1 + 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 5 split by comma 1 args)
   {
      H2PP_REPEAT((, ), RepeatCB_comma, 1, 5);
      for (int i = 0; i < 16; ++i) if((i < 5 ? i + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 5 split by space 2 args)
   {
      H2PP_REPEAT( , RepeatCB_space, (1, 2), 5);
      for (int i = 0; i < 16; ++i) if((i < 5 ? i + 1 + 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 6 split by comma 1 args)
   {
      H2PP_REPEAT((, ), RepeatCB_comma, 1, 6);
      for (int i = 0; i < 16; ++i) if((i < 6 ? i + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 6 split by space 2 args)
   {
      H2PP_REPEAT( , RepeatCB_space, (1, 2), 6);
      for (int i = 0; i < 16; ++i) if((i < 6 ? i + 1 + 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 7 split by comma 1 args)
   {
      H2PP_REPEAT((, ), RepeatCB_comma, 1, 7);
      for (int i = 0; i < 16; ++i) if((i < 7 ? i + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 7 split by space 2 args)
   {
      H2PP_REPEAT( , RepeatCB_space, (1, 2), 7);
      for (int i = 0; i < 16; ++i) if((i < 7 ? i + 1 + 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 8 split by comma 1 args)
   {
      H2PP_REPEAT((, ), RepeatCB_comma, 1, 8);
      for (int i = 0; i < 16; ++i) if((i < 8 ? i + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 8 split by space 2 args)
   {
      H2PP_REPEAT( , RepeatCB_space, (1, 2), 8);
      for (int i = 0; i < 16; ++i) if((i < 8 ? i + 1 + 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 9 split by comma 1 args)
   {
      H2PP_REPEAT((, ), RepeatCB_comma, 1, 9);
      for (int i = 0; i < 16; ++i) if((i < 9 ? i + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 9 split by space 2 args)
   {
      H2PP_REPEAT( , RepeatCB_space, (1, 2), 9);
      for (int i = 0; i < 16; ++i) if((i < 9 ? i + 1 + 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 10 split by comma 1 args)
   {
      H2PP_REPEAT((, ), RepeatCB_comma, 1, 10);
      for (int i = 0; i < 16; ++i) if((i < 10 ? i + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 10 split by space 2 args)
   {
      H2PP_REPEAT( , RepeatCB_space, (1, 2), 10);
      for (int i = 0; i < 16; ++i) if((i < 10 ? i + 1 + 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 11 split by comma 1 args)
   {
      H2PP_REPEAT((, ), RepeatCB_comma, 1, 11);
      for (int i = 0; i < 16; ++i) if((i < 11 ? i + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 11 split by space 2 args)
   {
      H2PP_REPEAT( , RepeatCB_space, (1, 2), 11);
      for (int i = 0; i < 16; ++i) if((i < 11 ? i + 1 + 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 12 split by comma 1 args)
   {
      H2PP_REPEAT((, ), RepeatCB_comma, 1, 12);
      for (int i = 0; i < 16; ++i) if((i < 12 ? i + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 12 split by space 2 args)
   {
      H2PP_REPEAT( , RepeatCB_space, (1, 2), 12);
      for (int i = 0; i < 16; ++i) if((i < 12 ? i + 1 + 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 13 split by comma 1 args)
   {
      H2PP_REPEAT((, ), RepeatCB_comma, 1, 13);
      for (int i = 0; i < 16; ++i) if((i < 13 ? i + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 13 split by space 2 args)
   {
      H2PP_REPEAT( , RepeatCB_space, (1, 2), 13);
      for (int i = 0; i < 16; ++i) if((i < 13 ? i + 1 + 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 14 split by comma 1 args)
   {
      H2PP_REPEAT((, ), RepeatCB_comma, 1, 14);
      for (int i = 0; i < 16; ++i) if((i < 14 ? i + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 14 split by space 2 args)
   {
      H2PP_REPEAT( , RepeatCB_space, (1, 2), 14);
      for (int i = 0; i < 16; ++i) if((i < 14 ? i + 1 + 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 15 split by comma 1 args)
   {
      H2PP_REPEAT((, ), RepeatCB_comma, 1, 15);
      for (int i = 0; i < 16; ++i) if((i < 15 ? i + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(repeat 15 split by space 2 args)
   {
      H2PP_REPEAT( , RepeatCB_space, (1, 2), 15);
      for (int i = 0; i < 16; ++i) if((i < 15 ? i + 1 + 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
}
SUITE(H2PP_FOREACH [generated])
{
#define ForEachCB_comma(Dummy, i, x) n[i] = i + x
#define ForEachCB_semicolon(a, i, x) n[i] = i + x + a
   int fails = 0;
   int n[16];
   for (int i = 0; i < 16; ++i) n[i] = -1;
   Case(foreach 0 split by comma 0 args)
   {
      H2PP_FOREACH((, ), ForEachCB_comma, (), );
      for (int i = 0; i < 16; ++i) if((i < 0 ? i * 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 0 split by semicolon 1 args)
   {
      H2PP_FOREACH((; ), ForEachCB_semicolon, (1), );
      for (int i = 0; i < 16; ++i) if((i < 0 ? i * 2 + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 1 split by comma 0 args)
   {
      H2PP_FOREACH((, ), ForEachCB_comma, (), 0);
      for (int i = 0; i < 16; ++i) if((i < 1 ? i * 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 1 split by semicolon 1 args)
   {
      H2PP_FOREACH((; ), ForEachCB_semicolon, (1), 0);
      for (int i = 0; i < 16; ++i) if((i < 1 ? i * 2 + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 2 split by comma 0 args)
   {
      H2PP_FOREACH((, ), ForEachCB_comma, (), 0, 1);
      for (int i = 0; i < 16; ++i) if((i < 2 ? i * 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 2 split by semicolon 1 args)
   {
      H2PP_FOREACH((; ), ForEachCB_semicolon, (1), 0, 1);
      for (int i = 0; i < 16; ++i) if((i < 2 ? i * 2 + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 3 split by comma 0 args)
   {
      H2PP_FOREACH((, ), ForEachCB_comma, (), 0, 1, 2);
      for (int i = 0; i < 16; ++i) if((i < 3 ? i * 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 3 split by semicolon 1 args)
   {
      H2PP_FOREACH((; ), ForEachCB_semicolon, (1), 0, 1, 2);
      for (int i = 0; i < 16; ++i) if((i < 3 ? i * 2 + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 4 split by comma 0 args)
   {
      H2PP_FOREACH((, ), ForEachCB_comma, (), 0, 1, 2, 3);
      for (int i = 0; i < 16; ++i) if((i < 4 ? i * 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 4 split by semicolon 1 args)
   {
      H2PP_FOREACH((; ), ForEachCB_semicolon, (1), 0, 1, 2, 3);
      for (int i = 0; i < 16; ++i) if((i < 4 ? i * 2 + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 5 split by comma 0 args)
   {
      H2PP_FOREACH((, ), ForEachCB_comma, (), 0, 1, 2, 3, 4);
      for (int i = 0; i < 16; ++i) if((i < 5 ? i * 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 5 split by semicolon 1 args)
   {
      H2PP_FOREACH((; ), ForEachCB_semicolon, (1), 0, 1, 2, 3, 4);
      for (int i = 0; i < 16; ++i) if((i < 5 ? i * 2 + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 6 split by comma 0 args)
   {
      H2PP_FOREACH((, ), ForEachCB_comma, (), 0, 1, 2, 3, 4, 5);
      for (int i = 0; i < 16; ++i) if((i < 6 ? i * 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 6 split by semicolon 1 args)
   {
      H2PP_FOREACH((; ), ForEachCB_semicolon, (1), 0, 1, 2, 3, 4, 5);
      for (int i = 0; i < 16; ++i) if((i < 6 ? i * 2 + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 7 split by comma 0 args)
   {
      H2PP_FOREACH((, ), ForEachCB_comma, (), 0, 1, 2, 3, 4, 5, 6);
      for (int i = 0; i < 16; ++i) if((i < 7 ? i * 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 7 split by semicolon 1 args)
   {
      H2PP_FOREACH((; ), ForEachCB_semicolon, (1), 0, 1, 2, 3, 4, 5, 6);
      for (int i = 0; i < 16; ++i) if((i < 7 ? i * 2 + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 8 split by comma 0 args)
   {
      H2PP_FOREACH((, ), ForEachCB_comma, (), 0, 1, 2, 3, 4, 5, 6, 7);
      for (int i = 0; i < 16; ++i) if((i < 8 ? i * 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 8 split by semicolon 1 args)
   {
      H2PP_FOREACH((; ), ForEachCB_semicolon, (1), 0, 1, 2, 3, 4, 5, 6, 7);
      for (int i = 0; i < 16; ++i) if((i < 8 ? i * 2 + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 9 split by comma 0 args)
   {
      H2PP_FOREACH((, ), ForEachCB_comma, (), 0, 1, 2, 3, 4, 5, 6, 7, 8);
      for (int i = 0; i < 16; ++i) if((i < 9 ? i * 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 9 split by semicolon 1 args)
   {
      H2PP_FOREACH((; ), ForEachCB_semicolon, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8);
      for (int i = 0; i < 16; ++i) if((i < 9 ? i * 2 + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 10 split by comma 0 args)
   {
      H2PP_FOREACH((, ), ForEachCB_comma, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
      for (int i = 0; i < 16; ++i) if((i < 10 ? i * 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 10 split by semicolon 1 args)
   {
      H2PP_FOREACH((; ), ForEachCB_semicolon, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
      for (int i = 0; i < 16; ++i) if((i < 10 ? i * 2 + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 11 split by comma 0 args)
   {
      H2PP_FOREACH((, ), ForEachCB_comma, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
      for (int i = 0; i < 16; ++i) if((i < 11 ? i * 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 11 split by semicolon 1 args)
   {
      H2PP_FOREACH((; ), ForEachCB_semicolon, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
      for (int i = 0; i < 16; ++i) if((i < 11 ? i * 2 + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 12 split by comma 0 args)
   {
      H2PP_FOREACH((, ), ForEachCB_comma, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
      for (int i = 0; i < 16; ++i) if((i < 12 ? i * 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 12 split by semicolon 1 args)
   {
      H2PP_FOREACH((; ), ForEachCB_semicolon, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
      for (int i = 0; i < 16; ++i) if((i < 12 ? i * 2 + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 13 split by comma 0 args)
   {
      H2PP_FOREACH((, ), ForEachCB_comma, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
      for (int i = 0; i < 16; ++i) if((i < 13 ? i * 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 13 split by semicolon 1 args)
   {
      H2PP_FOREACH((; ), ForEachCB_semicolon, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
      for (int i = 0; i < 16; ++i) if((i < 13 ? i * 2 + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 14 split by comma 0 args)
   {
      H2PP_FOREACH((, ), ForEachCB_comma, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
      for (int i = 0; i < 16; ++i) if((i < 14 ? i * 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 14 split by semicolon 1 args)
   {
      H2PP_FOREACH((; ), ForEachCB_semicolon, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
      for (int i = 0; i < 16; ++i) if((i < 14 ? i * 2 + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 15 split by comma 0 args)
   {
      H2PP_FOREACH((, ), ForEachCB_comma, (), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
      for (int i = 0; i < 16; ++i) if((i < 15 ? i * 2 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
   Case(foreach 15 split by semicolon 1 args)
   {
      H2PP_FOREACH((; ), ForEachCB_semicolon, (1), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);
      for (int i = 0; i < 16; ++i) if((i < 15 ? i * 2 + 1 : -1) != n[i]) ++fails;
      OK(0, fails);
   }
}
SUITE(H2PP_FULLMESH [generated])
{
#define FullMeshCB(a, i, j, x, y) n[i][j] = x*10000 + y*100 + a
   int fails = 0;
   int n[16][16];
   for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j) n[i][j] = -1;
   Case(fullmesh 0 split by comma 1 args)
   {
      H2PP_FULLMESH((, ), FullMeshCB, (1), ());
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 0 && j < 0 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 0 split by semicolon 1 args)
   {
      H2PP_FULLMESH((; ), FullMeshCB, (1), (), ());
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 0 && j < 0 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 1 split by comma 1 args)
   {
      H2PP_FULLMESH((, ), FullMeshCB, (1), (0));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 1 && j < 1 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 1 split by semicolon 1 args)
   {
      H2PP_FULLMESH((; ), FullMeshCB, (1), (0), (0));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 1 && j < 1 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 2 split by comma 1 args)
   {
      H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 2 && j < 2 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 2 split by semicolon 1 args)
   {
      H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1), (0, 1));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 2 && j < 2 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 3 split by comma 1 args)
   {
      H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 3 && j < 3 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 3 split by semicolon 1 args)
   {
      H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2), (0, 1, 2));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 3 && j < 3 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 4 split by comma 1 args)
   {
      H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 4 && j < 4 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 4 split by semicolon 1 args)
   {
      H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3), (0, 1, 2, 3));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 4 && j < 4 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 5 split by comma 1 args)
   {
      H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 5 && j < 5 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 5 split by semicolon 1 args)
   {
      H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4), (0, 1, 2, 3, 4));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 5 && j < 5 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 6 split by comma 1 args)
   {
      H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 6 && j < 6 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 6 split by semicolon 1 args)
   {
      H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5), (0, 1, 2, 3, 4, 5));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 6 && j < 6 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 7 split by comma 1 args)
   {
      H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 7 && j < 7 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 7 split by semicolon 1 args)
   {
      H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6), (0, 1, 2, 3, 4, 5, 6));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 7 && j < 7 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 8 split by comma 1 args)
   {
      H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 8 && j < 8 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 8 split by semicolon 1 args)
   {
      H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7), (0, 1, 2, 3, 4, 5, 6, 7));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 8 && j < 8 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 9 split by comma 1 args)
   {
      H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 9 && j < 9 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 9 split by semicolon 1 args)
   {
      H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8), (0, 1, 2, 3, 4, 5, 6, 7, 8));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 9 && j < 9 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 10 split by comma 1 args)
   {
      H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 10 && j < 10 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 10 split by semicolon 1 args)
   {
      H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 10 && j < 10 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 11 split by comma 1 args)
   {
      H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 11 && j < 11 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 11 split by semicolon 1 args)
   {
      H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 11 && j < 11 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 12 split by comma 1 args)
   {
      H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 12 && j < 12 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 12 split by semicolon 1 args)
   {
      H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 12 && j < 12 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 13 split by comma 1 args)
   {
      H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 13 && j < 13 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 13 split by semicolon 1 args)
   {
      H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 13 && j < 13 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 14 split by comma 1 args)
   {
      H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 14 && j < 14 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 14 split by semicolon 1 args)
   {
      H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 14 && j < 14 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 15 split by comma 1 args)
   {
      H2PP_FULLMESH((, ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 15 && j < 15 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
   Case(fullmesh 15 split by semicolon 1 args)
   {
      H2PP_FULLMESH((; ), FullMeshCB, (1), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14));
      for (int i = 0; i < 16; ++i) for (int j = 0; j < 16; ++j)
         if((i < 15 && j < 15 ? i*10000 + j*100 + 1 : -1) != n[i][j]) ++fails;
      OK(0, fails);
   }
}
